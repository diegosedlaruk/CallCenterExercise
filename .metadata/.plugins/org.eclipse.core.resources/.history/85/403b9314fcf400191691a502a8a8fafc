package main.clases;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.logging.Logger;
import java.util.stream.Collectors;

public class CallDispatcher {
	
	private static final int WAITING_SECONDS = 5;
	
	private static final int MAX_REINTENTOS = 5;
	
	public void atenderLlamado(LlamadaCallCenter llamada, List<Empleado> empleados) {
		
		boolean seAtendioLlamada = false;
		
		int iteracionesMaxima = CallDispatcher.MAX_REINTENTOS;
		
		Empleado empleadoLibre;
		
		while(!seAtendioLlamada && iteracionesMaxima < 5) {
			
			empleadoLibre = getEmpleadoLibre(empleados);
			
			if(empleadoLibre != null) {
				
				seAtendioLlamada = true;
				
				empleadoLibre.atenderLlamada(llamada);	
			}else {
				try {
					Thread.sleep(WAITING_SECONDS * 1000);
				} catch (InterruptedException e) {
					System.out.println("Ocurrió un error esperando que se desocupe un empleado. Llamada: " + llamada);
				}	
			}
		}
	}
			
	private Empleado getEmpleadoLibre(List<Empleado> empleados) {
		
		Empleado empleadoLibre;
		
		List<Empleado> operadoresLibres = this.filter(empleado -> empleado.getTipo().esOperador() && empleado.puedeAtenderLLamada(), empleados);
		
		//Si no conseguimos operadores libres, buscamos supervisores libres.
		if(operadoresLibres.isEmpty()) {
			operadoresLibres = this.filter(empleado -> empleado.getTipo().esSupervisor() && empleado.puedeAtenderLLamada(), empleados);

			//Si no conseguimos operadores libres, buscamos supervisores libres.
			if(operadoresLibres.isEmpty()) {
				operadoresLibres = this.filter(empleado -> empleado.getTipo().esDirector() && empleado.puedeAtenderLLamada(), empleados);
			}
		}
		
		empleadoLibre = !operadoresLibres.isEmpty() ? operadoresLibres.get(0) : null; 
		
		return empleadoLibre;
	}
	 
	private List<Empleado> filter(Predicate<Empleado> criteria, List<Empleado> list) {
	        return list.stream().filter(criteria).collect(Collectors.<Empleado>toList());
	}
}
